# リモートブランチとのログの差分表示
function glr() {
  _branch=`gbn`
  git log origin/${_branch}..${_branch}
}

function git-current-repo-name {
  basename `git rev-parse --show-toplevel`
}

function git-current-branch-status {
  local name st color

  if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
    return
  fi
  name=`gbn 2> /dev/null`
  if [[ $? -ne 0 ]]; then
    return
  fi
  st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    color=${fg[green]}
  elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
    color=${fg[yellow]}
  elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
    color=${fg_bold[red]}
  else
    color=${fg[red]}
  fi

  changed=`git_not_pushed`
  repo=`git-current-repo-name`

  # %{...%} は囲まれた文字列がエスケープシーケンスであることを明示する
  # これをしないと右プロンプトの位置がずれる
  echo "(%{$color%}$repo - $name%{$reset_color%}$changed)"
}

# リモートブランチのヘッドのハッシュと今のHEADを比較する
function git_not_pushed {
  # git管理下にいるかどうかの確認
  if [[ "`git rev-parse --is-inside-work-tree 2>/dev/null`" = "true" ]]; then
    # HEADのハッシュを取得
    _head="`git rev-parse --verify -q HEAD 2>/dev/null`"
    if [[ $? -eq 0 ]]; then
      # origin/ブランチ名のハッシュの取得
      _remote="`git rev-parse --verify -q origin/\`gbn\` 2>/dev/null`"
      if [[ $? -eq 0 ]]; then
        # 比較して違ったら、*を表示する
        if [[ ! "${_head}" = "${_remote}" ]]; then
          echo -n "*"
        fi
      fi
    fi
  fi
}

function gdr() {
  # 引数取得
  _remotes="$1"
  # 引数がない場合は、今のブランチのリモートを比較対象とする
  if [ "${_remotes}" = "" ]; then
    _remotes="remotes/origin/"`gbn`
  else
    # remotes/originがついていなかった場合、remotes/origin/を付与する。
    if [[ "${_remotes}" != remotes/origin* ]]; then
      _remotes="remotes/origin/"${_remotes}
    fi
  fi

  # ブランチの存在確認
  _hash="`git rev-parse --verify -q ${_remotes} 2>/dev/null`"
  if [ "$?" = "0" ]; then
    # git diffをここで行う
    git diff ${_hash}
  else
    echo "${_remotes} does not exist"
    return 1
  fi
}

# http://www.gitignore.io/cli
function gi() {
  if [ $# -ne 1 ]; then
    _param="list"
  else
    _param=$@
  fi
  curl https://www.gitignore.io/api/${_param}
}

# tig系のalias
alias t='tig'
alias ts='t status'
alias tl='t log'
alias td='t diff'
alias tst='t stash'

# git系のalias
alias g='git'
alias gf='g fetch'
alias gm='g merge'
alias gd='td'
alias gdc='g diff --cached'
alias ga='g add'
alias ga.='ga .'
alias gcm='g commit -m'
alias gcam='g commit --amend -m'
alias gca='g commit -a'
alias gbn='g rev-parse --abbrev-ref HEAD'
alias gp='g push -u origin `gbn`'
alias gl='tl'
alias gs='ts'
alias gco='g checkout'
alias gpl='g pull origin `gbn`'
alias gdrm='gdr remotes/origin/master'
alias gdrd='gdr remotes/origin/develop'
alias gr='g reflog --pretty=raw | t --pretty=raw'
alias gg='g log --pretty=format:"%h %C(yellow)%ad%C(reset) | %s%C(red)%d%C(reset) %C(blue)[%an]%C(reset)" --graph --date=iso'
alias gb='g branch'
alias gbr='g branch -r'
alias gba='g branch -av'
alias gst='tst'
alias gsts='g stash save'
alias gstsu='g stash save -u'
alias gstsk='g stash save --keep-index'
alias gstsku='gstsk -u'
alias gstp='g stash pop'
alias gsta='g stash apply'
alias gstd='g stash drop'
alias gstl='g stash list'
alias gsubup='git submodule update --init --recursive'
alias gcl='git config --list'
